#!/usr/bin/env python
# coding=utf-8

# -------------------------------------------------------------------------------
# Name:        LTSpice_RawWrite.py
# Purpose:     Create RAW Files
#
# Author:      Nuno Brum (nuno.brum@gmail.com)
#
# Created:     16-10-2021
# Licence:     General Public GNU License
# -------------------------------------------------------------------------------

"""
This module generates RAW Files from user data.
It can be used to combine RAW files generated by different Simulation Runs
"""

from time import strftime
from LTSpice_RawRead import DataSet
from struct import pack

try:
    from numpy import zeros, array, complex128, abs as numpy_abs, arange
except ImportError:
    USE_NNUMPY = False
else:
    USE_NNUMPY = True
    print("Found Numpy. WIll be used for storing data")

class Trace(DataSet):
    """Helper class"""

    def __init__(self, name, data):
        if name == 'time':
            datatype = 'time'
            numerical_type = 'real'
        elif name == 'frequency':
            datatype = 'frequency'
            numerical_type = 'complex'
        else:
            datatype = 'voltage'
            numerical_type = 'real'
        self.name = name
        self.type = datatype
        self.numerical_type = numerical_type
        if USE_NNUMPY and isinstance(data, (list, tuple)):
            self.data = array(data)
        else:
            self.data = data


class LTSpiceRawWrite(object):
    """
    This class represents the RAW data file being generated.
    """

    def __init__(self):
        self.traces = list()
        self.flag_type = 'real'
        self.flag_stepped = False
        self.flag_fastaccess = False
        self.plot_name = "Transient Analysis"
        self.offset = 0.0
        self.encoding = 'utf_16_le'
        
    def _str_flags(self):
        flags = [self.flag_type]
        if self.flag_stepped:
            flags.append('stepped')
        if self.flag_fastaccess:
            flags.append('fastaccess')
        return ' '.join(flags)

    def add_trace(self, trace: Trace):
        self.traces.append(trace)

    def save(self, filename: str, format_values='binary'):
        f = open(filename, 'wb')
        f.write("Title: * PyLTSpice LTSpice_RawWrite\n".encode(self.encoding))
        f.write("Date: {}\n".format(strftime("%a %b %d %H:%M:%S %Y")).encode(self.encoding))
        f.write("Plotname: {}\n".format(self.plot_name).encode(self.encoding))
        f.write("Flags: {}\n".format(self._str_flags()).encode(self.encoding))
        f.write("No. Variables: {}\n".format(len(self.traces)).encode(self.encoding))
        f.write("No. Points: {:12}\n".format(len(self.traces[0])).encode(self.encoding))
        f.write("Offset:   {:.16e}\n".format(self.offset).encode(self.encoding))
        f.write("Command: Linear Technology Corporation LTspice XVII\n".encode(self.encoding))
        f.write("Backannotation: \n".encode(self.encoding))
        f.write("Variables:\n".encode(self.encoding))
        for i, trace in enumerate(self.traces):
            f.write("\t{0}\t{1}\t{2}\n".format(i, trace.name, trace.type).encode(self.encoding))
        total_bytes = 0
        f.write("Binary:\n".encode(self.encoding))
        if self.flag_fastaccess:
            # TODO: This is not tested.
            for trace in self.traces:
                if False: #USE_NNUMPY:
                    f.write(trace.data.pack('dd'))
                else:
                    if trace.type == 'time':
                        fmt = 'd'
                    elif trace.type == 'frequency':
                        fmt = 'dd'
                    else:
                        fmt = 'f'
                    for value in trace.data:
                        f.write(pack(fmt, value))
        else:
            for i in range(len(self.traces[0])):
                for trace in self.traces:
                    if trace.type == 'time':
                        fmt = 'd'
                    elif trace.type == 'frequency':
                        fmt = 'dd'
                    else:
                        fmt = 'f'
                    total_bytes += f.write(pack(fmt, trace[i]))
        f.close()


if __name__ == '__main__':
    from LTSpice_RawRead import LTSpiceRawRead
    import numpy as np
    LW = LTSpiceRawWrite()
    tx = Trace('time', arange(0, 1e-3, 1e-6))
    vy = Trace('V(N001)', np.sin(np.pi * tx.data))
    LW.add_trace(tx)
    LW.add_trace(vy)
    LW.save("teste_w.raw")
    LR = LTSpiceRawRead("teste_w.raw")
    t = LR.get_trace('time')
    equal = True
    for ii in range(len(tx)):
        if t[ii] != tx[ii]:
            print(t[ii], tx[ii])
            equal = False
    print(equal)

    v = LR.get_trace('V(N001)')
    max_error = 1.5e-12
    for ii in range(len(vy)):
        err = abs(v[ii] - vy[ii])
        if err > max_error:
            max_error = err
            print(v[ii], vy[ii], v[ii] - vy[ii])
    print(max_error)
